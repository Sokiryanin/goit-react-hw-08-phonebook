{"version":3,"file":"static/js/368.8f53a2a7.chunk.js","mappings":"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","sources":["components/Section/Section.styled.js","components/Section/Section.js","components/ContactsList/ContactsList.styled.js","redux/contacts/selectors.js","components/ContactsList/ContactsList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/ContactsForm/ContactsForm.styled.js","components/ContactsForm/ContactsForm.js","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.section`\n  display: block;\n  max-width: 500px;\n\n  padding: 16px;\n  margin: 0 auto;\n  margin-top: 20px;\n  margin-bottom: 20px;\n\n  background-color: rgb(234, 234, 241);\n  box-shadow: 9px 9px 14px -6px rgba(105, 103, 105, 1);\n  border-radius: 4px;\n`;\n","import { Wrapper } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <Wrapper>\n      <h3>{title}</h3>\n      {children}\n    </Wrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding-left: 15px;\n`;\n\nexport const DeleteButton = styled.button`\n  background-color: #fff;\n  padding: 8px 16px;\n  cursor: pointer;\n  border: none;\n  border-radius: 5px;\n\n  &:hover {\n    background-color: gray;\n    color: #fff;\n  }\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.loading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(el =>\n      el.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { DeleteButton, List } from './ContactsList.styled';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactsList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <List>\n      {visibleContacts.map(({ id, name, number }) => (\n        <li key={id}>\n          <p>{name} </p>\n          <p>{number}</p>\n          <DeleteButton\n            type=\"button\"\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            Delete contact\n          </DeleteButton>\n        </li>\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const InputFilter = styled.input`\n  margin-botoom: 10px;\n  width: 350px;\n`;\n","import { InputFilter } from './Filter.styled';\n\nimport { useDispatch } from 'react-redux';\n\nimport { changeFilterValue } from 'redux/filter/slice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = evt => {\n    const value = evt.currentTarget.value;\n    dispatch(changeFilterValue(value));\n  };\n\n  return (\n    <div>\n      <InputFilter\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Contacts filter\"\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n","import styled from 'styled-components';\nimport { Form } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: block;\n  border-radius: 5px;\n  margin-right: auto;\n  margin-left: auto;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n  margin-top: 10px;\n  border-radius: 5px;\n`;\n\nexport const Input = styled.input`\n  margin-botoom: 10px;\n  width: 360px;\n`;\n\nexport const Button = styled.button`\n  background-color: #fff;\n  padding: 8px 16px;\n  cursor: pointer;\n  border: none;\n  border-radius: 5px;\n  margin-top: 15px;\n\n  &:hover {\n    background-color: gray;\n    color: #fff;\n  }\n`;\n","import { Button, Label, StyledForm } from './ContactsForm.styled';\n\nimport { Formik, Field } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport toast, { Toaster } from 'react-hot-toast';\n\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nimport * as Yup from 'yup';\n\nconst validSchema = Yup.object().shape({\n  name: Yup.string().min(2, 'Too short name!').required('Required!'),\n});\n\nexport const ContactsForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const checkedContact = contact => {\n    return contacts.some(\n      element => element.name.toLowerCase() === contact.name.toLowerCase()\n    );\n  };\n\n  const newContact = contact => {\n    if (checkedContact(contact)) {\n      toast.error(`${contact.name} already in contacts`);\n    } else {\n      dispatch(addContact(contact));\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={validSchema}\n      onSubmit={(values, actions) => {\n        newContact(values);\n        actions.resetForm();\n      }}\n    >\n      <StyledForm>\n        <Label>\n          Name:\n          <Field name=\"name\" type=\"text\" />\n        </Label>\n        <Label>\n          Tel:\n          <Field name=\"number\" type=\"tel\" />\n        </Label>\n\n        <Button type=\"submit\">Add contact</Button>\n        <Toaster />\n      </StyledForm>\n    </Formik>\n  );\n};\n","import { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactsForm } from 'components/ContactsForm/ContactsForm';\nimport { Section } from 'components/Section/Section';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Section title=\"Phonebook\">\n        <ContactsForm />\n      </Section>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <Section title=\"Contacts\">\n        <Filter />\n        <ContactsList />\n      </Section>\n    </div>\n  );\n}\n"],"names":["Wrapper","styled","_templateObject","_taggedTemplateLiteral","Section","_ref","title","children","_jsxs","_jsx","List","DeleteButton","_templateObject2","selectContacts","state","contacts","items","selectIsLoading","loading","selectVisibleContacts","createSelector","filter","el","name","toLowerCase","includes","ContactsList","visibleContacts","useSelector","dispatch","useDispatch","map","id","number","type","onClick","deleteContact","InputFilter","Filter","placeholder","onChange","evt","value","currentTarget","changeFilterValue","StyledForm","Form","Label","Button","_templateObject3","_templateObject4","validSchema","Yup","shape","min","required","ContactsForm","newContact","contact","some","element","checkedContact","addContact","toast","concat","Formik","initialValues","validationSchema","onSubmit","values","actions","resetForm","Field","Toaster","Contacts","isLoading","useEffect","fetchContacts"],"sourceRoot":""}